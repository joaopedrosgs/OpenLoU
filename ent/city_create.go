// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openlou/ent/city"
	"openlou/ent/construction"
	"openlou/ent/queue"
	"openlou/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityCreate is the builder for creating a City entity.
type CityCreate struct {
	config
	mutation *CityMutation
	hooks    []Hook
}

// SetX sets the "x" field.
func (cc *CityCreate) SetX(i int) *CityCreate {
	cc.mutation.SetX(i)
	return cc
}

// SetNillableX sets the "x" field if the given value is not nil.
func (cc *CityCreate) SetNillableX(i *int) *CityCreate {
	if i != nil {
		cc.SetX(*i)
	}
	return cc
}

// SetY sets the "y" field.
func (cc *CityCreate) SetY(i int) *CityCreate {
	cc.mutation.SetY(i)
	return cc
}

// SetNillableY sets the "y" field if the given value is not nil.
func (cc *CityCreate) SetNillableY(i *int) *CityCreate {
	if i != nil {
		cc.SetY(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CityCreate) SetName(s string) *CityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CityCreate) SetNillableName(s *string) *CityCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetPoints sets the "points" field.
func (cc *CityCreate) SetPoints(i int) *CityCreate {
	cc.mutation.SetPoints(i)
	return cc
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (cc *CityCreate) SetNillablePoints(i *int) *CityCreate {
	if i != nil {
		cc.SetPoints(*i)
	}
	return cc
}

// SetWoodProduction sets the "wood_production" field.
func (cc *CityCreate) SetWoodProduction(i int) *CityCreate {
	cc.mutation.SetWoodProduction(i)
	return cc
}

// SetNillableWoodProduction sets the "wood_production" field if the given value is not nil.
func (cc *CityCreate) SetNillableWoodProduction(i *int) *CityCreate {
	if i != nil {
		cc.SetWoodProduction(*i)
	}
	return cc
}

// SetStoneProduction sets the "stone_production" field.
func (cc *CityCreate) SetStoneProduction(i int) *CityCreate {
	cc.mutation.SetStoneProduction(i)
	return cc
}

// SetNillableStoneProduction sets the "stone_production" field if the given value is not nil.
func (cc *CityCreate) SetNillableStoneProduction(i *int) *CityCreate {
	if i != nil {
		cc.SetStoneProduction(*i)
	}
	return cc
}

// SetIronProduction sets the "iron_production" field.
func (cc *CityCreate) SetIronProduction(i int) *CityCreate {
	cc.mutation.SetIronProduction(i)
	return cc
}

// SetNillableIronProduction sets the "iron_production" field if the given value is not nil.
func (cc *CityCreate) SetNillableIronProduction(i *int) *CityCreate {
	if i != nil {
		cc.SetIronProduction(*i)
	}
	return cc
}

// SetFoodProduction sets the "food_production" field.
func (cc *CityCreate) SetFoodProduction(i int) *CityCreate {
	cc.mutation.SetFoodProduction(i)
	return cc
}

// SetNillableFoodProduction sets the "food_production" field if the given value is not nil.
func (cc *CityCreate) SetNillableFoodProduction(i *int) *CityCreate {
	if i != nil {
		cc.SetFoodProduction(*i)
	}
	return cc
}

// SetWoodStored sets the "wood_stored" field.
func (cc *CityCreate) SetWoodStored(i int) *CityCreate {
	cc.mutation.SetWoodStored(i)
	return cc
}

// SetNillableWoodStored sets the "wood_stored" field if the given value is not nil.
func (cc *CityCreate) SetNillableWoodStored(i *int) *CityCreate {
	if i != nil {
		cc.SetWoodStored(*i)
	}
	return cc
}

// SetStoneStored sets the "stone_stored" field.
func (cc *CityCreate) SetStoneStored(i int) *CityCreate {
	cc.mutation.SetStoneStored(i)
	return cc
}

// SetNillableStoneStored sets the "stone_stored" field if the given value is not nil.
func (cc *CityCreate) SetNillableStoneStored(i *int) *CityCreate {
	if i != nil {
		cc.SetStoneStored(*i)
	}
	return cc
}

// SetIronStored sets the "iron_stored" field.
func (cc *CityCreate) SetIronStored(i int) *CityCreate {
	cc.mutation.SetIronStored(i)
	return cc
}

// SetNillableIronStored sets the "iron_stored" field if the given value is not nil.
func (cc *CityCreate) SetNillableIronStored(i *int) *CityCreate {
	if i != nil {
		cc.SetIronStored(*i)
	}
	return cc
}

// SetFoodStored sets the "food_stored" field.
func (cc *CityCreate) SetFoodStored(i int) *CityCreate {
	cc.mutation.SetFoodStored(i)
	return cc
}

// SetNillableFoodStored sets the "food_stored" field if the given value is not nil.
func (cc *CityCreate) SetNillableFoodStored(i *int) *CityCreate {
	if i != nil {
		cc.SetFoodStored(*i)
	}
	return cc
}

// SetWoodLimit sets the "wood_limit" field.
func (cc *CityCreate) SetWoodLimit(i int) *CityCreate {
	cc.mutation.SetWoodLimit(i)
	return cc
}

// SetNillableWoodLimit sets the "wood_limit" field if the given value is not nil.
func (cc *CityCreate) SetNillableWoodLimit(i *int) *CityCreate {
	if i != nil {
		cc.SetWoodLimit(*i)
	}
	return cc
}

// SetStoneLimit sets the "stone_limit" field.
func (cc *CityCreate) SetStoneLimit(i int) *CityCreate {
	cc.mutation.SetStoneLimit(i)
	return cc
}

// SetNillableStoneLimit sets the "stone_limit" field if the given value is not nil.
func (cc *CityCreate) SetNillableStoneLimit(i *int) *CityCreate {
	if i != nil {
		cc.SetStoneLimit(*i)
	}
	return cc
}

// SetIronLimit sets the "iron_limit" field.
func (cc *CityCreate) SetIronLimit(i int) *CityCreate {
	cc.mutation.SetIronLimit(i)
	return cc
}

// SetNillableIronLimit sets the "iron_limit" field if the given value is not nil.
func (cc *CityCreate) SetNillableIronLimit(i *int) *CityCreate {
	if i != nil {
		cc.SetIronLimit(*i)
	}
	return cc
}

// SetFoodLimit sets the "food_limit" field.
func (cc *CityCreate) SetFoodLimit(i int) *CityCreate {
	cc.mutation.SetFoodLimit(i)
	return cc
}

// SetNillableFoodLimit sets the "food_limit" field if the given value is not nil.
func (cc *CityCreate) SetNillableFoodLimit(i *int) *CityCreate {
	if i != nil {
		cc.SetFoodLimit(*i)
	}
	return cc
}

// SetQueueTime sets the "queue_time" field.
func (cc *CityCreate) SetQueueTime(t time.Time) *CityCreate {
	cc.mutation.SetQueueTime(t)
	return cc
}

// SetNillableQueueTime sets the "queue_time" field if the given value is not nil.
func (cc *CityCreate) SetNillableQueueTime(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetQueueTime(*t)
	}
	return cc
}

// SetConstructionSpeed sets the "construction_speed" field.
func (cc *CityCreate) SetConstructionSpeed(i int) *CityCreate {
	cc.mutation.SetConstructionSpeed(i)
	return cc
}

// SetNillableConstructionSpeed sets the "construction_speed" field if the given value is not nil.
func (cc *CityCreate) SetNillableConstructionSpeed(i *int) *CityCreate {
	if i != nil {
		cc.SetConstructionSpeed(*i)
	}
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CityCreate) SetOwnerID(id int) *CityCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CityCreate) SetNillableOwnerID(id *int) *CityCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CityCreate) SetOwner(u *User) *CityCreate {
	return cc.SetOwnerID(u.ID)
}

// AddConstructionIDs adds the "constructions" edge to the Construction entity by IDs.
func (cc *CityCreate) AddConstructionIDs(ids ...int) *CityCreate {
	cc.mutation.AddConstructionIDs(ids...)
	return cc
}

// AddConstructions adds the "constructions" edges to the Construction entity.
func (cc *CityCreate) AddConstructions(c ...*Construction) *CityCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConstructionIDs(ids...)
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (cc *CityCreate) AddQueueIDs(ids ...int) *CityCreate {
	cc.mutation.AddQueueIDs(ids...)
	return cc
}

// AddQueue adds the "queue" edges to the Queue entity.
func (cc *CityCreate) AddQueue(q ...*Queue) *CityCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cc.AddQueueIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cc *CityCreate) Mutation() *CityMutation {
	return cc.mutation
}

// Save creates the City in the database.
func (cc *CityCreate) Save(ctx context.Context) (*City, error) {
	cc.defaults()
	return withHooks[*City, CityMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CityCreate) SaveX(ctx context.Context) *City {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CityCreate) defaults() {
	if _, ok := cc.mutation.X(); !ok {
		v := city.DefaultX
		cc.mutation.SetX(v)
	}
	if _, ok := cc.mutation.Y(); !ok {
		v := city.DefaultY
		cc.mutation.SetY(v)
	}
	if _, ok := cc.mutation.Name(); !ok {
		v := city.DefaultName
		cc.mutation.SetName(v)
	}
	if _, ok := cc.mutation.Points(); !ok {
		v := city.DefaultPoints
		cc.mutation.SetPoints(v)
	}
	if _, ok := cc.mutation.WoodProduction(); !ok {
		v := city.DefaultWoodProduction
		cc.mutation.SetWoodProduction(v)
	}
	if _, ok := cc.mutation.StoneProduction(); !ok {
		v := city.DefaultStoneProduction
		cc.mutation.SetStoneProduction(v)
	}
	if _, ok := cc.mutation.IronProduction(); !ok {
		v := city.DefaultIronProduction
		cc.mutation.SetIronProduction(v)
	}
	if _, ok := cc.mutation.FoodProduction(); !ok {
		v := city.DefaultFoodProduction
		cc.mutation.SetFoodProduction(v)
	}
	if _, ok := cc.mutation.WoodStored(); !ok {
		v := city.DefaultWoodStored
		cc.mutation.SetWoodStored(v)
	}
	if _, ok := cc.mutation.StoneStored(); !ok {
		v := city.DefaultStoneStored
		cc.mutation.SetStoneStored(v)
	}
	if _, ok := cc.mutation.IronStored(); !ok {
		v := city.DefaultIronStored
		cc.mutation.SetIronStored(v)
	}
	if _, ok := cc.mutation.FoodStored(); !ok {
		v := city.DefaultFoodStored
		cc.mutation.SetFoodStored(v)
	}
	if _, ok := cc.mutation.WoodLimit(); !ok {
		v := city.DefaultWoodLimit
		cc.mutation.SetWoodLimit(v)
	}
	if _, ok := cc.mutation.StoneLimit(); !ok {
		v := city.DefaultStoneLimit
		cc.mutation.SetStoneLimit(v)
	}
	if _, ok := cc.mutation.IronLimit(); !ok {
		v := city.DefaultIronLimit
		cc.mutation.SetIronLimit(v)
	}
	if _, ok := cc.mutation.FoodLimit(); !ok {
		v := city.DefaultFoodLimit
		cc.mutation.SetFoodLimit(v)
	}
	if _, ok := cc.mutation.QueueTime(); !ok {
		v := city.DefaultQueueTime()
		cc.mutation.SetQueueTime(v)
	}
	if _, ok := cc.mutation.ConstructionSpeed(); !ok {
		v := city.DefaultConstructionSpeed
		cc.mutation.SetConstructionSpeed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CityCreate) check() error {
	if _, ok := cc.mutation.X(); !ok {
		return &ValidationError{Name: "x", err: errors.New(`ent: missing required field "City.x"`)}
	}
	if _, ok := cc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "City.y"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "City.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "City.points"`)}
	}
	if _, ok := cc.mutation.WoodProduction(); !ok {
		return &ValidationError{Name: "wood_production", err: errors.New(`ent: missing required field "City.wood_production"`)}
	}
	if _, ok := cc.mutation.StoneProduction(); !ok {
		return &ValidationError{Name: "stone_production", err: errors.New(`ent: missing required field "City.stone_production"`)}
	}
	if _, ok := cc.mutation.IronProduction(); !ok {
		return &ValidationError{Name: "iron_production", err: errors.New(`ent: missing required field "City.iron_production"`)}
	}
	if _, ok := cc.mutation.FoodProduction(); !ok {
		return &ValidationError{Name: "food_production", err: errors.New(`ent: missing required field "City.food_production"`)}
	}
	if _, ok := cc.mutation.WoodStored(); !ok {
		return &ValidationError{Name: "wood_stored", err: errors.New(`ent: missing required field "City.wood_stored"`)}
	}
	if _, ok := cc.mutation.StoneStored(); !ok {
		return &ValidationError{Name: "stone_stored", err: errors.New(`ent: missing required field "City.stone_stored"`)}
	}
	if _, ok := cc.mutation.IronStored(); !ok {
		return &ValidationError{Name: "iron_stored", err: errors.New(`ent: missing required field "City.iron_stored"`)}
	}
	if _, ok := cc.mutation.FoodStored(); !ok {
		return &ValidationError{Name: "food_stored", err: errors.New(`ent: missing required field "City.food_stored"`)}
	}
	if _, ok := cc.mutation.WoodLimit(); !ok {
		return &ValidationError{Name: "wood_limit", err: errors.New(`ent: missing required field "City.wood_limit"`)}
	}
	if _, ok := cc.mutation.StoneLimit(); !ok {
		return &ValidationError{Name: "stone_limit", err: errors.New(`ent: missing required field "City.stone_limit"`)}
	}
	if _, ok := cc.mutation.IronLimit(); !ok {
		return &ValidationError{Name: "iron_limit", err: errors.New(`ent: missing required field "City.iron_limit"`)}
	}
	if _, ok := cc.mutation.FoodLimit(); !ok {
		return &ValidationError{Name: "food_limit", err: errors.New(`ent: missing required field "City.food_limit"`)}
	}
	if _, ok := cc.mutation.QueueTime(); !ok {
		return &ValidationError{Name: "queue_time", err: errors.New(`ent: missing required field "City.queue_time"`)}
	}
	if _, ok := cc.mutation.ConstructionSpeed(); !ok {
		return &ValidationError{Name: "construction_speed", err: errors.New(`ent: missing required field "City.construction_speed"`)}
	}
	return nil
}

func (cc *CityCreate) sqlSave(ctx context.Context) (*City, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CityCreate) createSpec() (*City, *sqlgraph.CreateSpec) {
	var (
		_node = &City{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: city.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.X(); ok {
		_spec.SetField(city.FieldX, field.TypeInt, value)
		_node.X = value
	}
	if value, ok := cc.mutation.Y(); ok {
		_spec.SetField(city.FieldY, field.TypeInt, value)
		_node.Y = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Points(); ok {
		_spec.SetField(city.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := cc.mutation.WoodProduction(); ok {
		_spec.SetField(city.FieldWoodProduction, field.TypeInt, value)
		_node.WoodProduction = value
	}
	if value, ok := cc.mutation.StoneProduction(); ok {
		_spec.SetField(city.FieldStoneProduction, field.TypeInt, value)
		_node.StoneProduction = value
	}
	if value, ok := cc.mutation.IronProduction(); ok {
		_spec.SetField(city.FieldIronProduction, field.TypeInt, value)
		_node.IronProduction = value
	}
	if value, ok := cc.mutation.FoodProduction(); ok {
		_spec.SetField(city.FieldFoodProduction, field.TypeInt, value)
		_node.FoodProduction = value
	}
	if value, ok := cc.mutation.WoodStored(); ok {
		_spec.SetField(city.FieldWoodStored, field.TypeInt, value)
		_node.WoodStored = value
	}
	if value, ok := cc.mutation.StoneStored(); ok {
		_spec.SetField(city.FieldStoneStored, field.TypeInt, value)
		_node.StoneStored = value
	}
	if value, ok := cc.mutation.IronStored(); ok {
		_spec.SetField(city.FieldIronStored, field.TypeInt, value)
		_node.IronStored = value
	}
	if value, ok := cc.mutation.FoodStored(); ok {
		_spec.SetField(city.FieldFoodStored, field.TypeInt, value)
		_node.FoodStored = value
	}
	if value, ok := cc.mutation.WoodLimit(); ok {
		_spec.SetField(city.FieldWoodLimit, field.TypeInt, value)
		_node.WoodLimit = value
	}
	if value, ok := cc.mutation.StoneLimit(); ok {
		_spec.SetField(city.FieldStoneLimit, field.TypeInt, value)
		_node.StoneLimit = value
	}
	if value, ok := cc.mutation.IronLimit(); ok {
		_spec.SetField(city.FieldIronLimit, field.TypeInt, value)
		_node.IronLimit = value
	}
	if value, ok := cc.mutation.FoodLimit(); ok {
		_spec.SetField(city.FieldFoodLimit, field.TypeInt, value)
		_node.FoodLimit = value
	}
	if value, ok := cc.mutation.QueueTime(); ok {
		_spec.SetField(city.FieldQueueTime, field.TypeTime, value)
		_node.QueueTime = value
	}
	if value, ok := cc.mutation.ConstructionSpeed(); ok {
		_spec.SetField(city.FieldConstructionSpeed, field.TypeInt, value)
		_node.ConstructionSpeed = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CityCreateBulk is the builder for creating many City entities in bulk.
type CityCreateBulk struct {
	config
	builders []*CityCreate
}

// Save creates the City entities in the database.
func (ccb *CityCreateBulk) Save(ctx context.Context) ([]*City, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*City, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CityCreateBulk) SaveX(ctx context.Context) []*City {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

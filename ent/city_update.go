// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openlou/ent/city"
	"openlou/ent/construction"
	"openlou/ent/predicate"
	"openlou/ent/queue"
	"openlou/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// Where appends a list predicates to the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetX sets the "x" field.
func (cu *CityUpdate) SetX(i int) *CityUpdate {
	cu.mutation.ResetX()
	cu.mutation.SetX(i)
	return cu
}

// SetNillableX sets the "x" field if the given value is not nil.
func (cu *CityUpdate) SetNillableX(i *int) *CityUpdate {
	if i != nil {
		cu.SetX(*i)
	}
	return cu
}

// AddX adds i to the "x" field.
func (cu *CityUpdate) AddX(i int) *CityUpdate {
	cu.mutation.AddX(i)
	return cu
}

// SetY sets the "y" field.
func (cu *CityUpdate) SetY(i int) *CityUpdate {
	cu.mutation.ResetY()
	cu.mutation.SetY(i)
	return cu
}

// SetNillableY sets the "y" field if the given value is not nil.
func (cu *CityUpdate) SetNillableY(i *int) *CityUpdate {
	if i != nil {
		cu.SetY(*i)
	}
	return cu
}

// AddY adds i to the "y" field.
func (cu *CityUpdate) AddY(i int) *CityUpdate {
	cu.mutation.AddY(i)
	return cu
}

// SetName sets the "name" field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CityUpdate) SetNillableName(s *string) *CityUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetPoints sets the "points" field.
func (cu *CityUpdate) SetPoints(i int) *CityUpdate {
	cu.mutation.ResetPoints()
	cu.mutation.SetPoints(i)
	return cu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (cu *CityUpdate) SetNillablePoints(i *int) *CityUpdate {
	if i != nil {
		cu.SetPoints(*i)
	}
	return cu
}

// AddPoints adds i to the "points" field.
func (cu *CityUpdate) AddPoints(i int) *CityUpdate {
	cu.mutation.AddPoints(i)
	return cu
}

// SetWoodProduction sets the "wood_production" field.
func (cu *CityUpdate) SetWoodProduction(i int) *CityUpdate {
	cu.mutation.ResetWoodProduction()
	cu.mutation.SetWoodProduction(i)
	return cu
}

// SetNillableWoodProduction sets the "wood_production" field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodProduction(i *int) *CityUpdate {
	if i != nil {
		cu.SetWoodProduction(*i)
	}
	return cu
}

// AddWoodProduction adds i to the "wood_production" field.
func (cu *CityUpdate) AddWoodProduction(i int) *CityUpdate {
	cu.mutation.AddWoodProduction(i)
	return cu
}

// SetStoneProduction sets the "stone_production" field.
func (cu *CityUpdate) SetStoneProduction(i int) *CityUpdate {
	cu.mutation.ResetStoneProduction()
	cu.mutation.SetStoneProduction(i)
	return cu
}

// SetNillableStoneProduction sets the "stone_production" field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneProduction(i *int) *CityUpdate {
	if i != nil {
		cu.SetStoneProduction(*i)
	}
	return cu
}

// AddStoneProduction adds i to the "stone_production" field.
func (cu *CityUpdate) AddStoneProduction(i int) *CityUpdate {
	cu.mutation.AddStoneProduction(i)
	return cu
}

// SetIronProduction sets the "iron_production" field.
func (cu *CityUpdate) SetIronProduction(i int) *CityUpdate {
	cu.mutation.ResetIronProduction()
	cu.mutation.SetIronProduction(i)
	return cu
}

// SetNillableIronProduction sets the "iron_production" field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronProduction(i *int) *CityUpdate {
	if i != nil {
		cu.SetIronProduction(*i)
	}
	return cu
}

// AddIronProduction adds i to the "iron_production" field.
func (cu *CityUpdate) AddIronProduction(i int) *CityUpdate {
	cu.mutation.AddIronProduction(i)
	return cu
}

// SetFoodProduction sets the "food_production" field.
func (cu *CityUpdate) SetFoodProduction(i int) *CityUpdate {
	cu.mutation.ResetFoodProduction()
	cu.mutation.SetFoodProduction(i)
	return cu
}

// SetNillableFoodProduction sets the "food_production" field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodProduction(i *int) *CityUpdate {
	if i != nil {
		cu.SetFoodProduction(*i)
	}
	return cu
}

// AddFoodProduction adds i to the "food_production" field.
func (cu *CityUpdate) AddFoodProduction(i int) *CityUpdate {
	cu.mutation.AddFoodProduction(i)
	return cu
}

// SetWoodStored sets the "wood_stored" field.
func (cu *CityUpdate) SetWoodStored(i int) *CityUpdate {
	cu.mutation.ResetWoodStored()
	cu.mutation.SetWoodStored(i)
	return cu
}

// SetNillableWoodStored sets the "wood_stored" field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodStored(i *int) *CityUpdate {
	if i != nil {
		cu.SetWoodStored(*i)
	}
	return cu
}

// AddWoodStored adds i to the "wood_stored" field.
func (cu *CityUpdate) AddWoodStored(i int) *CityUpdate {
	cu.mutation.AddWoodStored(i)
	return cu
}

// SetStoneStored sets the "stone_stored" field.
func (cu *CityUpdate) SetStoneStored(i int) *CityUpdate {
	cu.mutation.ResetStoneStored()
	cu.mutation.SetStoneStored(i)
	return cu
}

// SetNillableStoneStored sets the "stone_stored" field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneStored(i *int) *CityUpdate {
	if i != nil {
		cu.SetStoneStored(*i)
	}
	return cu
}

// AddStoneStored adds i to the "stone_stored" field.
func (cu *CityUpdate) AddStoneStored(i int) *CityUpdate {
	cu.mutation.AddStoneStored(i)
	return cu
}

// SetIronStored sets the "iron_stored" field.
func (cu *CityUpdate) SetIronStored(i int) *CityUpdate {
	cu.mutation.ResetIronStored()
	cu.mutation.SetIronStored(i)
	return cu
}

// SetNillableIronStored sets the "iron_stored" field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronStored(i *int) *CityUpdate {
	if i != nil {
		cu.SetIronStored(*i)
	}
	return cu
}

// AddIronStored adds i to the "iron_stored" field.
func (cu *CityUpdate) AddIronStored(i int) *CityUpdate {
	cu.mutation.AddIronStored(i)
	return cu
}

// SetFoodStored sets the "food_stored" field.
func (cu *CityUpdate) SetFoodStored(i int) *CityUpdate {
	cu.mutation.ResetFoodStored()
	cu.mutation.SetFoodStored(i)
	return cu
}

// SetNillableFoodStored sets the "food_stored" field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodStored(i *int) *CityUpdate {
	if i != nil {
		cu.SetFoodStored(*i)
	}
	return cu
}

// AddFoodStored adds i to the "food_stored" field.
func (cu *CityUpdate) AddFoodStored(i int) *CityUpdate {
	cu.mutation.AddFoodStored(i)
	return cu
}

// SetWoodLimit sets the "wood_limit" field.
func (cu *CityUpdate) SetWoodLimit(i int) *CityUpdate {
	cu.mutation.ResetWoodLimit()
	cu.mutation.SetWoodLimit(i)
	return cu
}

// SetNillableWoodLimit sets the "wood_limit" field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodLimit(i *int) *CityUpdate {
	if i != nil {
		cu.SetWoodLimit(*i)
	}
	return cu
}

// AddWoodLimit adds i to the "wood_limit" field.
func (cu *CityUpdate) AddWoodLimit(i int) *CityUpdate {
	cu.mutation.AddWoodLimit(i)
	return cu
}

// SetStoneLimit sets the "stone_limit" field.
func (cu *CityUpdate) SetStoneLimit(i int) *CityUpdate {
	cu.mutation.ResetStoneLimit()
	cu.mutation.SetStoneLimit(i)
	return cu
}

// SetNillableStoneLimit sets the "stone_limit" field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneLimit(i *int) *CityUpdate {
	if i != nil {
		cu.SetStoneLimit(*i)
	}
	return cu
}

// AddStoneLimit adds i to the "stone_limit" field.
func (cu *CityUpdate) AddStoneLimit(i int) *CityUpdate {
	cu.mutation.AddStoneLimit(i)
	return cu
}

// SetIronLimit sets the "iron_limit" field.
func (cu *CityUpdate) SetIronLimit(i int) *CityUpdate {
	cu.mutation.ResetIronLimit()
	cu.mutation.SetIronLimit(i)
	return cu
}

// SetNillableIronLimit sets the "iron_limit" field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronLimit(i *int) *CityUpdate {
	if i != nil {
		cu.SetIronLimit(*i)
	}
	return cu
}

// AddIronLimit adds i to the "iron_limit" field.
func (cu *CityUpdate) AddIronLimit(i int) *CityUpdate {
	cu.mutation.AddIronLimit(i)
	return cu
}

// SetFoodLimit sets the "food_limit" field.
func (cu *CityUpdate) SetFoodLimit(i int) *CityUpdate {
	cu.mutation.ResetFoodLimit()
	cu.mutation.SetFoodLimit(i)
	return cu
}

// SetNillableFoodLimit sets the "food_limit" field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodLimit(i *int) *CityUpdate {
	if i != nil {
		cu.SetFoodLimit(*i)
	}
	return cu
}

// AddFoodLimit adds i to the "food_limit" field.
func (cu *CityUpdate) AddFoodLimit(i int) *CityUpdate {
	cu.mutation.AddFoodLimit(i)
	return cu
}

// SetQueueTime sets the "queue_time" field.
func (cu *CityUpdate) SetQueueTime(t time.Time) *CityUpdate {
	cu.mutation.SetQueueTime(t)
	return cu
}

// SetNillableQueueTime sets the "queue_time" field if the given value is not nil.
func (cu *CityUpdate) SetNillableQueueTime(t *time.Time) *CityUpdate {
	if t != nil {
		cu.SetQueueTime(*t)
	}
	return cu
}

// SetConstructionSpeed sets the "construction_speed" field.
func (cu *CityUpdate) SetConstructionSpeed(i int) *CityUpdate {
	cu.mutation.ResetConstructionSpeed()
	cu.mutation.SetConstructionSpeed(i)
	return cu
}

// SetNillableConstructionSpeed sets the "construction_speed" field if the given value is not nil.
func (cu *CityUpdate) SetNillableConstructionSpeed(i *int) *CityUpdate {
	if i != nil {
		cu.SetConstructionSpeed(*i)
	}
	return cu
}

// AddConstructionSpeed adds i to the "construction_speed" field.
func (cu *CityUpdate) AddConstructionSpeed(i int) *CityUpdate {
	cu.mutation.AddConstructionSpeed(i)
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CityUpdate) SetOwnerID(id int) *CityUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CityUpdate) SetNillableOwnerID(id *int) *CityUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CityUpdate) SetOwner(u *User) *CityUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddConstructionIDs adds the "constructions" edge to the Construction entity by IDs.
func (cu *CityUpdate) AddConstructionIDs(ids ...int) *CityUpdate {
	cu.mutation.AddConstructionIDs(ids...)
	return cu
}

// AddConstructions adds the "constructions" edges to the Construction entity.
func (cu *CityUpdate) AddConstructions(c ...*Construction) *CityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConstructionIDs(ids...)
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (cu *CityUpdate) AddQueueIDs(ids ...int) *CityUpdate {
	cu.mutation.AddQueueIDs(ids...)
	return cu
}

// AddQueue adds the "queue" edges to the Queue entity.
func (cu *CityUpdate) AddQueue(q ...*Queue) *CityUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.AddQueueIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CityUpdate) ClearOwner() *CityUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearConstructions clears all "constructions" edges to the Construction entity.
func (cu *CityUpdate) ClearConstructions() *CityUpdate {
	cu.mutation.ClearConstructions()
	return cu
}

// RemoveConstructionIDs removes the "constructions" edge to Construction entities by IDs.
func (cu *CityUpdate) RemoveConstructionIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveConstructionIDs(ids...)
	return cu
}

// RemoveConstructions removes "constructions" edges to Construction entities.
func (cu *CityUpdate) RemoveConstructions(c ...*Construction) *CityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConstructionIDs(ids...)
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (cu *CityUpdate) ClearQueue() *CityUpdate {
	cu.mutation.ClearQueue()
	return cu
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (cu *CityUpdate) RemoveQueueIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveQueueIDs(ids...)
	return cu
}

// RemoveQueue removes "queue" edges to Queue entities.
func (cu *CityUpdate) RemoveQueue(q ...*Queue) *CityUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CityMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CityUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.X(); ok {
		_spec.SetField(city.FieldX, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedX(); ok {
		_spec.AddField(city.FieldX, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Y(); ok {
		_spec.SetField(city.FieldY, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedY(); ok {
		_spec.AddField(city.FieldY, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Points(); ok {
		_spec.SetField(city.FieldPoints, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPoints(); ok {
		_spec.AddField(city.FieldPoints, field.TypeInt, value)
	}
	if value, ok := cu.mutation.WoodProduction(); ok {
		_spec.SetField(city.FieldWoodProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWoodProduction(); ok {
		_spec.AddField(city.FieldWoodProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.StoneProduction(); ok {
		_spec.SetField(city.FieldStoneProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStoneProduction(); ok {
		_spec.AddField(city.FieldStoneProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IronProduction(); ok {
		_spec.SetField(city.FieldIronProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIronProduction(); ok {
		_spec.AddField(city.FieldIronProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.FoodProduction(); ok {
		_spec.SetField(city.FieldFoodProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFoodProduction(); ok {
		_spec.AddField(city.FieldFoodProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.WoodStored(); ok {
		_spec.SetField(city.FieldWoodStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWoodStored(); ok {
		_spec.AddField(city.FieldWoodStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.StoneStored(); ok {
		_spec.SetField(city.FieldStoneStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStoneStored(); ok {
		_spec.AddField(city.FieldStoneStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IronStored(); ok {
		_spec.SetField(city.FieldIronStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIronStored(); ok {
		_spec.AddField(city.FieldIronStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.FoodStored(); ok {
		_spec.SetField(city.FieldFoodStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFoodStored(); ok {
		_spec.AddField(city.FieldFoodStored, field.TypeInt, value)
	}
	if value, ok := cu.mutation.WoodLimit(); ok {
		_spec.SetField(city.FieldWoodLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWoodLimit(); ok {
		_spec.AddField(city.FieldWoodLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.StoneLimit(); ok {
		_spec.SetField(city.FieldStoneLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStoneLimit(); ok {
		_spec.AddField(city.FieldStoneLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IronLimit(); ok {
		_spec.SetField(city.FieldIronLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIronLimit(); ok {
		_spec.AddField(city.FieldIronLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.FoodLimit(); ok {
		_spec.SetField(city.FieldFoodLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedFoodLimit(); ok {
		_spec.AddField(city.FieldFoodLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.QueueTime(); ok {
		_spec.SetField(city.FieldQueueTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ConstructionSpeed(); ok {
		_spec.SetField(city.FieldConstructionSpeed, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedConstructionSpeed(); ok {
		_spec.AddField(city.FieldConstructionSpeed, field.TypeInt, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConstructionsIDs(); len(nodes) > 0 && !cu.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CityMutation
}

// SetX sets the "x" field.
func (cuo *CityUpdateOne) SetX(i int) *CityUpdateOne {
	cuo.mutation.ResetX()
	cuo.mutation.SetX(i)
	return cuo
}

// SetNillableX sets the "x" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableX(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetX(*i)
	}
	return cuo
}

// AddX adds i to the "x" field.
func (cuo *CityUpdateOne) AddX(i int) *CityUpdateOne {
	cuo.mutation.AddX(i)
	return cuo
}

// SetY sets the "y" field.
func (cuo *CityUpdateOne) SetY(i int) *CityUpdateOne {
	cuo.mutation.ResetY()
	cuo.mutation.SetY(i)
	return cuo
}

// SetNillableY sets the "y" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableY(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetY(*i)
	}
	return cuo
}

// AddY adds i to the "y" field.
func (cuo *CityUpdateOne) AddY(i int) *CityUpdateOne {
	cuo.mutation.AddY(i)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableName(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetPoints sets the "points" field.
func (cuo *CityUpdateOne) SetPoints(i int) *CityUpdateOne {
	cuo.mutation.ResetPoints()
	cuo.mutation.SetPoints(i)
	return cuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillablePoints(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetPoints(*i)
	}
	return cuo
}

// AddPoints adds i to the "points" field.
func (cuo *CityUpdateOne) AddPoints(i int) *CityUpdateOne {
	cuo.mutation.AddPoints(i)
	return cuo
}

// SetWoodProduction sets the "wood_production" field.
func (cuo *CityUpdateOne) SetWoodProduction(i int) *CityUpdateOne {
	cuo.mutation.ResetWoodProduction()
	cuo.mutation.SetWoodProduction(i)
	return cuo
}

// SetNillableWoodProduction sets the "wood_production" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodProduction(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetWoodProduction(*i)
	}
	return cuo
}

// AddWoodProduction adds i to the "wood_production" field.
func (cuo *CityUpdateOne) AddWoodProduction(i int) *CityUpdateOne {
	cuo.mutation.AddWoodProduction(i)
	return cuo
}

// SetStoneProduction sets the "stone_production" field.
func (cuo *CityUpdateOne) SetStoneProduction(i int) *CityUpdateOne {
	cuo.mutation.ResetStoneProduction()
	cuo.mutation.SetStoneProduction(i)
	return cuo
}

// SetNillableStoneProduction sets the "stone_production" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneProduction(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetStoneProduction(*i)
	}
	return cuo
}

// AddStoneProduction adds i to the "stone_production" field.
func (cuo *CityUpdateOne) AddStoneProduction(i int) *CityUpdateOne {
	cuo.mutation.AddStoneProduction(i)
	return cuo
}

// SetIronProduction sets the "iron_production" field.
func (cuo *CityUpdateOne) SetIronProduction(i int) *CityUpdateOne {
	cuo.mutation.ResetIronProduction()
	cuo.mutation.SetIronProduction(i)
	return cuo
}

// SetNillableIronProduction sets the "iron_production" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronProduction(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetIronProduction(*i)
	}
	return cuo
}

// AddIronProduction adds i to the "iron_production" field.
func (cuo *CityUpdateOne) AddIronProduction(i int) *CityUpdateOne {
	cuo.mutation.AddIronProduction(i)
	return cuo
}

// SetFoodProduction sets the "food_production" field.
func (cuo *CityUpdateOne) SetFoodProduction(i int) *CityUpdateOne {
	cuo.mutation.ResetFoodProduction()
	cuo.mutation.SetFoodProduction(i)
	return cuo
}

// SetNillableFoodProduction sets the "food_production" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodProduction(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetFoodProduction(*i)
	}
	return cuo
}

// AddFoodProduction adds i to the "food_production" field.
func (cuo *CityUpdateOne) AddFoodProduction(i int) *CityUpdateOne {
	cuo.mutation.AddFoodProduction(i)
	return cuo
}

// SetWoodStored sets the "wood_stored" field.
func (cuo *CityUpdateOne) SetWoodStored(i int) *CityUpdateOne {
	cuo.mutation.ResetWoodStored()
	cuo.mutation.SetWoodStored(i)
	return cuo
}

// SetNillableWoodStored sets the "wood_stored" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodStored(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetWoodStored(*i)
	}
	return cuo
}

// AddWoodStored adds i to the "wood_stored" field.
func (cuo *CityUpdateOne) AddWoodStored(i int) *CityUpdateOne {
	cuo.mutation.AddWoodStored(i)
	return cuo
}

// SetStoneStored sets the "stone_stored" field.
func (cuo *CityUpdateOne) SetStoneStored(i int) *CityUpdateOne {
	cuo.mutation.ResetStoneStored()
	cuo.mutation.SetStoneStored(i)
	return cuo
}

// SetNillableStoneStored sets the "stone_stored" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneStored(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetStoneStored(*i)
	}
	return cuo
}

// AddStoneStored adds i to the "stone_stored" field.
func (cuo *CityUpdateOne) AddStoneStored(i int) *CityUpdateOne {
	cuo.mutation.AddStoneStored(i)
	return cuo
}

// SetIronStored sets the "iron_stored" field.
func (cuo *CityUpdateOne) SetIronStored(i int) *CityUpdateOne {
	cuo.mutation.ResetIronStored()
	cuo.mutation.SetIronStored(i)
	return cuo
}

// SetNillableIronStored sets the "iron_stored" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronStored(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetIronStored(*i)
	}
	return cuo
}

// AddIronStored adds i to the "iron_stored" field.
func (cuo *CityUpdateOne) AddIronStored(i int) *CityUpdateOne {
	cuo.mutation.AddIronStored(i)
	return cuo
}

// SetFoodStored sets the "food_stored" field.
func (cuo *CityUpdateOne) SetFoodStored(i int) *CityUpdateOne {
	cuo.mutation.ResetFoodStored()
	cuo.mutation.SetFoodStored(i)
	return cuo
}

// SetNillableFoodStored sets the "food_stored" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodStored(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetFoodStored(*i)
	}
	return cuo
}

// AddFoodStored adds i to the "food_stored" field.
func (cuo *CityUpdateOne) AddFoodStored(i int) *CityUpdateOne {
	cuo.mutation.AddFoodStored(i)
	return cuo
}

// SetWoodLimit sets the "wood_limit" field.
func (cuo *CityUpdateOne) SetWoodLimit(i int) *CityUpdateOne {
	cuo.mutation.ResetWoodLimit()
	cuo.mutation.SetWoodLimit(i)
	return cuo
}

// SetNillableWoodLimit sets the "wood_limit" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodLimit(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetWoodLimit(*i)
	}
	return cuo
}

// AddWoodLimit adds i to the "wood_limit" field.
func (cuo *CityUpdateOne) AddWoodLimit(i int) *CityUpdateOne {
	cuo.mutation.AddWoodLimit(i)
	return cuo
}

// SetStoneLimit sets the "stone_limit" field.
func (cuo *CityUpdateOne) SetStoneLimit(i int) *CityUpdateOne {
	cuo.mutation.ResetStoneLimit()
	cuo.mutation.SetStoneLimit(i)
	return cuo
}

// SetNillableStoneLimit sets the "stone_limit" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneLimit(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetStoneLimit(*i)
	}
	return cuo
}

// AddStoneLimit adds i to the "stone_limit" field.
func (cuo *CityUpdateOne) AddStoneLimit(i int) *CityUpdateOne {
	cuo.mutation.AddStoneLimit(i)
	return cuo
}

// SetIronLimit sets the "iron_limit" field.
func (cuo *CityUpdateOne) SetIronLimit(i int) *CityUpdateOne {
	cuo.mutation.ResetIronLimit()
	cuo.mutation.SetIronLimit(i)
	return cuo
}

// SetNillableIronLimit sets the "iron_limit" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronLimit(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetIronLimit(*i)
	}
	return cuo
}

// AddIronLimit adds i to the "iron_limit" field.
func (cuo *CityUpdateOne) AddIronLimit(i int) *CityUpdateOne {
	cuo.mutation.AddIronLimit(i)
	return cuo
}

// SetFoodLimit sets the "food_limit" field.
func (cuo *CityUpdateOne) SetFoodLimit(i int) *CityUpdateOne {
	cuo.mutation.ResetFoodLimit()
	cuo.mutation.SetFoodLimit(i)
	return cuo
}

// SetNillableFoodLimit sets the "food_limit" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodLimit(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetFoodLimit(*i)
	}
	return cuo
}

// AddFoodLimit adds i to the "food_limit" field.
func (cuo *CityUpdateOne) AddFoodLimit(i int) *CityUpdateOne {
	cuo.mutation.AddFoodLimit(i)
	return cuo
}

// SetQueueTime sets the "queue_time" field.
func (cuo *CityUpdateOne) SetQueueTime(t time.Time) *CityUpdateOne {
	cuo.mutation.SetQueueTime(t)
	return cuo
}

// SetNillableQueueTime sets the "queue_time" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableQueueTime(t *time.Time) *CityUpdateOne {
	if t != nil {
		cuo.SetQueueTime(*t)
	}
	return cuo
}

// SetConstructionSpeed sets the "construction_speed" field.
func (cuo *CityUpdateOne) SetConstructionSpeed(i int) *CityUpdateOne {
	cuo.mutation.ResetConstructionSpeed()
	cuo.mutation.SetConstructionSpeed(i)
	return cuo
}

// SetNillableConstructionSpeed sets the "construction_speed" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableConstructionSpeed(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetConstructionSpeed(*i)
	}
	return cuo
}

// AddConstructionSpeed adds i to the "construction_speed" field.
func (cuo *CityUpdateOne) AddConstructionSpeed(i int) *CityUpdateOne {
	cuo.mutation.AddConstructionSpeed(i)
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CityUpdateOne) SetOwnerID(id int) *CityUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableOwnerID(id *int) *CityUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CityUpdateOne) SetOwner(u *User) *CityUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddConstructionIDs adds the "constructions" edge to the Construction entity by IDs.
func (cuo *CityUpdateOne) AddConstructionIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddConstructionIDs(ids...)
	return cuo
}

// AddConstructions adds the "constructions" edges to the Construction entity.
func (cuo *CityUpdateOne) AddConstructions(c ...*Construction) *CityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConstructionIDs(ids...)
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (cuo *CityUpdateOne) AddQueueIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddQueueIDs(ids...)
	return cuo
}

// AddQueue adds the "queue" edges to the Queue entity.
func (cuo *CityUpdateOne) AddQueue(q ...*Queue) *CityUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.AddQueueIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CityUpdateOne) ClearOwner() *CityUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearConstructions clears all "constructions" edges to the Construction entity.
func (cuo *CityUpdateOne) ClearConstructions() *CityUpdateOne {
	cuo.mutation.ClearConstructions()
	return cuo
}

// RemoveConstructionIDs removes the "constructions" edge to Construction entities by IDs.
func (cuo *CityUpdateOne) RemoveConstructionIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveConstructionIDs(ids...)
	return cuo
}

// RemoveConstructions removes "constructions" edges to Construction entities.
func (cuo *CityUpdateOne) RemoveConstructions(c ...*Construction) *CityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConstructionIDs(ids...)
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (cuo *CityUpdateOne) ClearQueue() *CityUpdateOne {
	cuo.mutation.ClearQueue()
	return cuo
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (cuo *CityUpdateOne) RemoveQueueIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveQueueIDs(ids...)
	return cuo
}

// RemoveQueue removes "queue" edges to Queue entities.
func (cuo *CityUpdateOne) RemoveQueue(q ...*Queue) *CityUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.RemoveQueueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	return withHooks[*City, CityMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CityUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "City.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.X(); ok {
		_spec.SetField(city.FieldX, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedX(); ok {
		_spec.AddField(city.FieldX, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Y(); ok {
		_spec.SetField(city.FieldY, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedY(); ok {
		_spec.AddField(city.FieldY, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Points(); ok {
		_spec.SetField(city.FieldPoints, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPoints(); ok {
		_spec.AddField(city.FieldPoints, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.WoodProduction(); ok {
		_spec.SetField(city.FieldWoodProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWoodProduction(); ok {
		_spec.AddField(city.FieldWoodProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.StoneProduction(); ok {
		_spec.SetField(city.FieldStoneProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStoneProduction(); ok {
		_spec.AddField(city.FieldStoneProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IronProduction(); ok {
		_spec.SetField(city.FieldIronProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIronProduction(); ok {
		_spec.AddField(city.FieldIronProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.FoodProduction(); ok {
		_spec.SetField(city.FieldFoodProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFoodProduction(); ok {
		_spec.AddField(city.FieldFoodProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.WoodStored(); ok {
		_spec.SetField(city.FieldWoodStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWoodStored(); ok {
		_spec.AddField(city.FieldWoodStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.StoneStored(); ok {
		_spec.SetField(city.FieldStoneStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStoneStored(); ok {
		_spec.AddField(city.FieldStoneStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IronStored(); ok {
		_spec.SetField(city.FieldIronStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIronStored(); ok {
		_spec.AddField(city.FieldIronStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.FoodStored(); ok {
		_spec.SetField(city.FieldFoodStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFoodStored(); ok {
		_spec.AddField(city.FieldFoodStored, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.WoodLimit(); ok {
		_spec.SetField(city.FieldWoodLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWoodLimit(); ok {
		_spec.AddField(city.FieldWoodLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.StoneLimit(); ok {
		_spec.SetField(city.FieldStoneLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStoneLimit(); ok {
		_spec.AddField(city.FieldStoneLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IronLimit(); ok {
		_spec.SetField(city.FieldIronLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIronLimit(); ok {
		_spec.AddField(city.FieldIronLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.FoodLimit(); ok {
		_spec.SetField(city.FieldFoodLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedFoodLimit(); ok {
		_spec.AddField(city.FieldFoodLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.QueueTime(); ok {
		_spec.SetField(city.FieldQueueTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ConstructionSpeed(); ok {
		_spec.SetField(city.FieldConstructionSpeed, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedConstructionSpeed(); ok {
		_spec.AddField(city.FieldConstructionSpeed, field.TypeInt, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConstructionsIDs(); len(nodes) > 0 && !cuo.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

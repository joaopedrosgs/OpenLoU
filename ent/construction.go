// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"openlou/ent/city"
	"openlou/ent/construction"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Construction is the model entity for the Construction schema.
type Construction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// X holds the value of the "x" field.
	X int `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y int `json:"y,omitempty"`
	// RawProduction holds the value of the "raw_production" field.
	RawProduction int `json:"raw_production,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Modifier holds the value of the "modifier" field.
	Modifier float64 `json:"modifier,omitempty"`
	// NeedRefresh holds the value of the "need_refresh" field.
	NeedRefresh bool `json:"need_refresh,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConstructionQuery when eager-loading is set.
	Edges              ConstructionEdges `json:"edges"`
	city_constructions *int
}

// ConstructionEdges holds the relations/edges for other nodes in the graph.
type ConstructionEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Queue holds the value of the queue edge.
	Queue []*Queue `json:"queue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConstructionEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e ConstructionEdges) QueueOrErr() ([]*Queue, error) {
	if e.loadedTypes[1] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Construction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case construction.FieldNeedRefresh:
			values[i] = new(sql.NullBool)
		case construction.FieldModifier:
			values[i] = new(sql.NullFloat64)
		case construction.FieldID, construction.FieldX, construction.FieldY, construction.FieldRawProduction, construction.FieldType, construction.FieldLevel:
			values[i] = new(sql.NullInt64)
		case construction.ForeignKeys[0]: // city_constructions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Construction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Construction fields.
func (c *Construction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case construction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case construction.FieldX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				c.X = int(value.Int64)
			}
		case construction.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				c.Y = int(value.Int64)
			}
		case construction.FieldRawProduction:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field raw_production", values[i])
			} else if value.Valid {
				c.RawProduction = int(value.Int64)
			}
		case construction.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int(value.Int64)
			}
		case construction.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				c.Level = int(value.Int64)
			}
		case construction.FieldModifier:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field modifier", values[i])
			} else if value.Valid {
				c.Modifier = value.Float64
			}
		case construction.FieldNeedRefresh:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field need_refresh", values[i])
			} else if value.Valid {
				c.NeedRefresh = value.Bool
			}
		case construction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field city_constructions", value)
			} else if value.Valid {
				c.city_constructions = new(int)
				*c.city_constructions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Construction entity.
func (c *Construction) QueryCity() *CityQuery {
	return (&ConstructionClient{config: c.config}).QueryCity(c)
}

// QueryQueue queries the "queue" edge of the Construction entity.
func (c *Construction) QueryQueue() *QueueQuery {
	return (&ConstructionClient{config: c.config}).QueryQueue(c)
}

// Update returns a builder for updating this Construction.
// Note that you need to call Construction.Unwrap() before calling this method if this Construction
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Construction) Update() *ConstructionUpdateOne {
	return (&ConstructionClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Construction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Construction) Unwrap() *Construction {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Construction is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Construction) String() string {
	var builder strings.Builder
	builder.WriteString("Construction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("x=")
	builder.WriteString(fmt.Sprintf("%v", c.X))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(fmt.Sprintf("%v", c.Y))
	builder.WriteString(", ")
	builder.WriteString("raw_production=")
	builder.WriteString(fmt.Sprintf("%v", c.RawProduction))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", c.Level))
	builder.WriteString(", ")
	builder.WriteString("modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.Modifier))
	builder.WriteString(", ")
	builder.WriteString("need_refresh=")
	builder.WriteString(fmt.Sprintf("%v", c.NeedRefresh))
	builder.WriteByte(')')
	return builder.String()
}

// Constructions is a parsable slice of Construction.
type Constructions []*Construction

func (c Constructions) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

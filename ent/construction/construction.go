// Code generated by ent, DO NOT EDIT.

package construction

const (
	// Label holds the string label denoting the construction type in the database.
	Label = "construction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldX holds the string denoting the x field in the database.
	FieldX = "x"
	// FieldY holds the string denoting the y field in the database.
	FieldY = "y"
	// FieldRawProduction holds the string denoting the raw_production field in the database.
	FieldRawProduction = "raw_production"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldModifier holds the string denoting the modifier field in the database.
	FieldModifier = "modifier"
	// FieldNeedRefresh holds the string denoting the need_refresh field in the database.
	FieldNeedRefresh = "need_refresh"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeQueue holds the string denoting the queue edge name in mutations.
	EdgeQueue = "queue"
	// Table holds the table name of the construction in the database.
	Table = "constructions"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "constructions"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_constructions"
	// QueueTable is the table that holds the queue relation/edge.
	QueueTable = "queues"
	// QueueInverseTable is the table name for the Queue entity.
	// It exists in this package in order to avoid circular dependency with the "queue" package.
	QueueInverseTable = "queues"
	// QueueColumn is the table column denoting the queue relation/edge.
	QueueColumn = "construction_queue"
)

// Columns holds all SQL columns for construction fields.
var Columns = []string{
	FieldID,
	FieldX,
	FieldY,
	FieldRawProduction,
	FieldType,
	FieldLevel,
	FieldModifier,
	FieldNeedRefresh,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "constructions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"city_constructions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRawProduction holds the default value on creation for the "raw_production" field.
	DefaultRawProduction int
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int
	// DefaultModifier holds the default value on creation for the "modifier" field.
	DefaultModifier float64
	// DefaultNeedRefresh holds the default value on creation for the "need_refresh" field.
	DefaultNeedRefresh bool
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openlou/ent/city"
	"openlou/ent/construction"
	"openlou/ent/predicate"
	"openlou/ent/queue"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConstructionUpdate is the builder for updating Construction entities.
type ConstructionUpdate struct {
	config
	hooks    []Hook
	mutation *ConstructionMutation
}

// Where appends a list predicates to the ConstructionUpdate builder.
func (cu *ConstructionUpdate) Where(ps ...predicate.Construction) *ConstructionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetX sets the "x" field.
func (cu *ConstructionUpdate) SetX(i int) *ConstructionUpdate {
	cu.mutation.ResetX()
	cu.mutation.SetX(i)
	return cu
}

// AddX adds i to the "x" field.
func (cu *ConstructionUpdate) AddX(i int) *ConstructionUpdate {
	cu.mutation.AddX(i)
	return cu
}

// SetY sets the "y" field.
func (cu *ConstructionUpdate) SetY(i int) *ConstructionUpdate {
	cu.mutation.ResetY()
	cu.mutation.SetY(i)
	return cu
}

// AddY adds i to the "y" field.
func (cu *ConstructionUpdate) AddY(i int) *ConstructionUpdate {
	cu.mutation.AddY(i)
	return cu
}

// SetRawProduction sets the "raw_production" field.
func (cu *ConstructionUpdate) SetRawProduction(i int) *ConstructionUpdate {
	cu.mutation.ResetRawProduction()
	cu.mutation.SetRawProduction(i)
	return cu
}

// SetNillableRawProduction sets the "raw_production" field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableRawProduction(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetRawProduction(*i)
	}
	return cu
}

// AddRawProduction adds i to the "raw_production" field.
func (cu *ConstructionUpdate) AddRawProduction(i int) *ConstructionUpdate {
	cu.mutation.AddRawProduction(i)
	return cu
}

// SetType sets the "type" field.
func (cu *ConstructionUpdate) SetType(i int) *ConstructionUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableType(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to the "type" field.
func (cu *ConstructionUpdate) AddType(i int) *ConstructionUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetLevel sets the "level" field.
func (cu *ConstructionUpdate) SetLevel(i int) *ConstructionUpdate {
	cu.mutation.ResetLevel()
	cu.mutation.SetLevel(i)
	return cu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableLevel(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetLevel(*i)
	}
	return cu
}

// AddLevel adds i to the "level" field.
func (cu *ConstructionUpdate) AddLevel(i int) *ConstructionUpdate {
	cu.mutation.AddLevel(i)
	return cu
}

// SetModifier sets the "modifier" field.
func (cu *ConstructionUpdate) SetModifier(f float64) *ConstructionUpdate {
	cu.mutation.ResetModifier()
	cu.mutation.SetModifier(f)
	return cu
}

// SetNillableModifier sets the "modifier" field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableModifier(f *float64) *ConstructionUpdate {
	if f != nil {
		cu.SetModifier(*f)
	}
	return cu
}

// AddModifier adds f to the "modifier" field.
func (cu *ConstructionUpdate) AddModifier(f float64) *ConstructionUpdate {
	cu.mutation.AddModifier(f)
	return cu
}

// SetNeedRefresh sets the "need_refresh" field.
func (cu *ConstructionUpdate) SetNeedRefresh(b bool) *ConstructionUpdate {
	cu.mutation.SetNeedRefresh(b)
	return cu
}

// SetNillableNeedRefresh sets the "need_refresh" field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableNeedRefresh(b *bool) *ConstructionUpdate {
	if b != nil {
		cu.SetNeedRefresh(*b)
	}
	return cu
}

// SetCityID sets the "city" edge to the City entity by ID.
func (cu *ConstructionUpdate) SetCityID(id int) *ConstructionUpdate {
	cu.mutation.SetCityID(id)
	return cu
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableCityID(id *int) *ConstructionUpdate {
	if id != nil {
		cu = cu.SetCityID(*id)
	}
	return cu
}

// SetCity sets the "city" edge to the City entity.
func (cu *ConstructionUpdate) SetCity(c *City) *ConstructionUpdate {
	return cu.SetCityID(c.ID)
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (cu *ConstructionUpdate) AddQueueIDs(ids ...int) *ConstructionUpdate {
	cu.mutation.AddQueueIDs(ids...)
	return cu
}

// AddQueue adds the "queue" edges to the Queue entity.
func (cu *ConstructionUpdate) AddQueue(q ...*Queue) *ConstructionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.AddQueueIDs(ids...)
}

// Mutation returns the ConstructionMutation object of the builder.
func (cu *ConstructionUpdate) Mutation() *ConstructionMutation {
	return cu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cu *ConstructionUpdate) ClearCity() *ConstructionUpdate {
	cu.mutation.ClearCity()
	return cu
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (cu *ConstructionUpdate) ClearQueue() *ConstructionUpdate {
	cu.mutation.ClearQueue()
	return cu
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (cu *ConstructionUpdate) RemoveQueueIDs(ids ...int) *ConstructionUpdate {
	cu.mutation.RemoveQueueIDs(ids...)
	return cu
}

// RemoveQueue removes "queue" edges to Queue entities.
func (cu *ConstructionUpdate) RemoveQueue(q ...*Queue) *ConstructionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConstructionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ConstructionMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConstructionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConstructionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConstructionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConstructionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   construction.Table,
			Columns: construction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: construction.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.X(); ok {
		_spec.SetField(construction.FieldX, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedX(); ok {
		_spec.AddField(construction.FieldX, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Y(); ok {
		_spec.SetField(construction.FieldY, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedY(); ok {
		_spec.AddField(construction.FieldY, field.TypeInt, value)
	}
	if value, ok := cu.mutation.RawProduction(); ok {
		_spec.SetField(construction.FieldRawProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedRawProduction(); ok {
		_spec.AddField(construction.FieldRawProduction, field.TypeInt, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(construction.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(construction.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.SetField(construction.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLevel(); ok {
		_spec.AddField(construction.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Modifier(); ok {
		_spec.SetField(construction.FieldModifier, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedModifier(); ok {
		_spec.AddField(construction.FieldModifier, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.NeedRefresh(); ok {
		_spec.SetField(construction.FieldNeedRefresh, field.TypeBool, value)
	}
	if cu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{construction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConstructionUpdateOne is the builder for updating a single Construction entity.
type ConstructionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConstructionMutation
}

// SetX sets the "x" field.
func (cuo *ConstructionUpdateOne) SetX(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetX()
	cuo.mutation.SetX(i)
	return cuo
}

// AddX adds i to the "x" field.
func (cuo *ConstructionUpdateOne) AddX(i int) *ConstructionUpdateOne {
	cuo.mutation.AddX(i)
	return cuo
}

// SetY sets the "y" field.
func (cuo *ConstructionUpdateOne) SetY(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetY()
	cuo.mutation.SetY(i)
	return cuo
}

// AddY adds i to the "y" field.
func (cuo *ConstructionUpdateOne) AddY(i int) *ConstructionUpdateOne {
	cuo.mutation.AddY(i)
	return cuo
}

// SetRawProduction sets the "raw_production" field.
func (cuo *ConstructionUpdateOne) SetRawProduction(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetRawProduction()
	cuo.mutation.SetRawProduction(i)
	return cuo
}

// SetNillableRawProduction sets the "raw_production" field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableRawProduction(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetRawProduction(*i)
	}
	return cuo
}

// AddRawProduction adds i to the "raw_production" field.
func (cuo *ConstructionUpdateOne) AddRawProduction(i int) *ConstructionUpdateOne {
	cuo.mutation.AddRawProduction(i)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ConstructionUpdateOne) SetType(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableType(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *ConstructionUpdateOne) AddType(i int) *ConstructionUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetLevel sets the "level" field.
func (cuo *ConstructionUpdateOne) SetLevel(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetLevel()
	cuo.mutation.SetLevel(i)
	return cuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableLevel(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetLevel(*i)
	}
	return cuo
}

// AddLevel adds i to the "level" field.
func (cuo *ConstructionUpdateOne) AddLevel(i int) *ConstructionUpdateOne {
	cuo.mutation.AddLevel(i)
	return cuo
}

// SetModifier sets the "modifier" field.
func (cuo *ConstructionUpdateOne) SetModifier(f float64) *ConstructionUpdateOne {
	cuo.mutation.ResetModifier()
	cuo.mutation.SetModifier(f)
	return cuo
}

// SetNillableModifier sets the "modifier" field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableModifier(f *float64) *ConstructionUpdateOne {
	if f != nil {
		cuo.SetModifier(*f)
	}
	return cuo
}

// AddModifier adds f to the "modifier" field.
func (cuo *ConstructionUpdateOne) AddModifier(f float64) *ConstructionUpdateOne {
	cuo.mutation.AddModifier(f)
	return cuo
}

// SetNeedRefresh sets the "need_refresh" field.
func (cuo *ConstructionUpdateOne) SetNeedRefresh(b bool) *ConstructionUpdateOne {
	cuo.mutation.SetNeedRefresh(b)
	return cuo
}

// SetNillableNeedRefresh sets the "need_refresh" field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableNeedRefresh(b *bool) *ConstructionUpdateOne {
	if b != nil {
		cuo.SetNeedRefresh(*b)
	}
	return cuo
}

// SetCityID sets the "city" edge to the City entity by ID.
func (cuo *ConstructionUpdateOne) SetCityID(id int) *ConstructionUpdateOne {
	cuo.mutation.SetCityID(id)
	return cuo
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableCityID(id *int) *ConstructionUpdateOne {
	if id != nil {
		cuo = cuo.SetCityID(*id)
	}
	return cuo
}

// SetCity sets the "city" edge to the City entity.
func (cuo *ConstructionUpdateOne) SetCity(c *City) *ConstructionUpdateOne {
	return cuo.SetCityID(c.ID)
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (cuo *ConstructionUpdateOne) AddQueueIDs(ids ...int) *ConstructionUpdateOne {
	cuo.mutation.AddQueueIDs(ids...)
	return cuo
}

// AddQueue adds the "queue" edges to the Queue entity.
func (cuo *ConstructionUpdateOne) AddQueue(q ...*Queue) *ConstructionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.AddQueueIDs(ids...)
}

// Mutation returns the ConstructionMutation object of the builder.
func (cuo *ConstructionUpdateOne) Mutation() *ConstructionMutation {
	return cuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cuo *ConstructionUpdateOne) ClearCity() *ConstructionUpdateOne {
	cuo.mutation.ClearCity()
	return cuo
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (cuo *ConstructionUpdateOne) ClearQueue() *ConstructionUpdateOne {
	cuo.mutation.ClearQueue()
	return cuo
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (cuo *ConstructionUpdateOne) RemoveQueueIDs(ids ...int) *ConstructionUpdateOne {
	cuo.mutation.RemoveQueueIDs(ids...)
	return cuo
}

// RemoveQueue removes "queue" edges to Queue entities.
func (cuo *ConstructionUpdateOne) RemoveQueue(q ...*Queue) *ConstructionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.RemoveQueueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConstructionUpdateOne) Select(field string, fields ...string) *ConstructionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Construction entity.
func (cuo *ConstructionUpdateOne) Save(ctx context.Context) (*Construction, error) {
	return withHooks[*Construction, ConstructionMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConstructionUpdateOne) SaveX(ctx context.Context) *Construction {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConstructionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConstructionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConstructionUpdateOne) sqlSave(ctx context.Context) (_node *Construction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   construction.Table,
			Columns: construction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: construction.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Construction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, construction.FieldID)
		for _, f := range fields {
			if !construction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != construction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.X(); ok {
		_spec.SetField(construction.FieldX, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedX(); ok {
		_spec.AddField(construction.FieldX, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Y(); ok {
		_spec.SetField(construction.FieldY, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedY(); ok {
		_spec.AddField(construction.FieldY, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.RawProduction(); ok {
		_spec.SetField(construction.FieldRawProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedRawProduction(); ok {
		_spec.AddField(construction.FieldRawProduction, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(construction.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(construction.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.SetField(construction.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLevel(); ok {
		_spec.AddField(construction.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Modifier(); ok {
		_spec.SetField(construction.FieldModifier, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedModifier(); ok {
		_spec.AddField(construction.FieldModifier, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.NeedRefresh(); ok {
		_spec.SetField(construction.FieldNeedRefresh, field.TypeBool, value)
	}
	if cuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Construction{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{construction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

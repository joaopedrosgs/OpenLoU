// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"openlou/ent/city"
	"openlou/ent/construction"
	"openlou/ent/queue"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Queue is the model entity for the Queue schema.
type Queue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Completion holds the value of the "completion" field.
	Completion time.Time `json:"completion,omitempty"`
	// Action holds the value of the "action" field.
	Action int `json:"action,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueueQuery when eager-loading is set.
	Edges              QueueEdges `json:"edges"`
	city_queue         *int
	construction_queue *int
}

// QueueEdges holds the relations/edges for other nodes in the graph.
type QueueEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Construction holds the value of the construction edge.
	Construction *Construction `json:"construction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// ConstructionOrErr returns the Construction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) ConstructionOrErr() (*Construction, error) {
	if e.loadedTypes[1] {
		if e.Construction == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: construction.Label}
		}
		return e.Construction, nil
	}
	return nil, &NotLoadedError{edge: "construction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Queue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queue.FieldID, queue.FieldAction, queue.FieldOrder:
			values[i] = new(sql.NullInt64)
		case queue.FieldCompletion:
			values[i] = new(sql.NullTime)
		case queue.ForeignKeys[0]: // city_queue
			values[i] = new(sql.NullInt64)
		case queue.ForeignKeys[1]: // construction_queue
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Queue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Queue fields.
func (q *Queue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case queue.FieldCompletion:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completion", values[i])
			} else if value.Valid {
				q.Completion = value.Time
			}
		case queue.FieldAction:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				q.Action = int(value.Int64)
			}
		case queue.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				q.Order = int(value.Int64)
			}
		case queue.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field city_queue", value)
			} else if value.Valid {
				q.city_queue = new(int)
				*q.city_queue = int(value.Int64)
			}
		case queue.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field construction_queue", value)
			} else if value.Valid {
				q.construction_queue = new(int)
				*q.construction_queue = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Queue entity.
func (q *Queue) QueryCity() *CityQuery {
	return (&QueueClient{config: q.config}).QueryCity(q)
}

// QueryConstruction queries the "construction" edge of the Queue entity.
func (q *Queue) QueryConstruction() *ConstructionQuery {
	return (&QueueClient{config: q.config}).QueryConstruction(q)
}

// Update returns a builder for updating this Queue.
// Note that you need to call Queue.Unwrap() before calling this method if this Queue
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Queue) Update() *QueueUpdateOne {
	return (&QueueClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Queue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Queue) Unwrap() *Queue {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Queue is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Queue) String() string {
	var builder strings.Builder
	builder.WriteString("Queue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("completion=")
	builder.WriteString(q.Completion.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", q.Action))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", q.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Queues is a parsable slice of Queue.
type Queues []*Queue

func (q Queues) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}

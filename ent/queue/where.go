// Code generated by ent, DO NOT EDIT.

package queue

import (
	"openlou/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Queue {
	return predicate.Queue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Queue {
	return predicate.Queue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Queue {
	return predicate.Queue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Queue {
	return predicate.Queue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Queue {
	return predicate.Queue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Queue {
	return predicate.Queue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Queue {
	return predicate.Queue(sql.FieldLTE(FieldID, id))
}

// Completion applies equality check predicate on the "completion" field. It's identical to CompletionEQ.
func Completion(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldCompletion, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldAction, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldOrder, v))
}

// CompletionEQ applies the EQ predicate on the "completion" field.
func CompletionEQ(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldCompletion, v))
}

// CompletionNEQ applies the NEQ predicate on the "completion" field.
func CompletionNEQ(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldNEQ(FieldCompletion, v))
}

// CompletionIn applies the In predicate on the "completion" field.
func CompletionIn(vs ...time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldIn(FieldCompletion, vs...))
}

// CompletionNotIn applies the NotIn predicate on the "completion" field.
func CompletionNotIn(vs ...time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldNotIn(FieldCompletion, vs...))
}

// CompletionGT applies the GT predicate on the "completion" field.
func CompletionGT(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldGT(FieldCompletion, v))
}

// CompletionGTE applies the GTE predicate on the "completion" field.
func CompletionGTE(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldGTE(FieldCompletion, v))
}

// CompletionLT applies the LT predicate on the "completion" field.
func CompletionLT(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldLT(FieldCompletion, v))
}

// CompletionLTE applies the LTE predicate on the "completion" field.
func CompletionLTE(v time.Time) predicate.Queue {
	return predicate.Queue(sql.FieldLTE(FieldCompletion, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v int) predicate.Queue {
	return predicate.Queue(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...int) predicate.Queue {
	return predicate.Queue(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...int) predicate.Queue {
	return predicate.Queue(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v int) predicate.Queue {
	return predicate.Queue(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v int) predicate.Queue {
	return predicate.Queue(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v int) predicate.Queue {
	return predicate.Queue(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v int) predicate.Queue {
	return predicate.Queue(sql.FieldLTE(FieldAction, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Queue {
	return predicate.Queue(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Queue {
	return predicate.Queue(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Queue {
	return predicate.Queue(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Queue {
	return predicate.Queue(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Queue {
	return predicate.Queue(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Queue {
	return predicate.Queue(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Queue {
	return predicate.Queue(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Queue {
	return predicate.Queue(sql.FieldLTE(FieldOrder, v))
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConstruction applies the HasEdge predicate on the "construction" edge.
func HasConstruction() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConstructionTable, ConstructionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConstructionWith applies the HasEdge predicate on the "construction" edge with a given conditions (other predicates).
func HasConstructionWith(preds ...predicate.Construction) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConstructionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConstructionTable, ConstructionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		p(s.Not())
	})
}

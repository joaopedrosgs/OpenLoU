// Code generated by ent, DO NOT EDIT.

package ent

import (
	"openlou/ent/city"
	"openlou/ent/construction"
	"openlou/ent/schema"
	"openlou/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cityFields := schema.City{}.Fields()
	_ = cityFields
	// cityDescX is the schema descriptor for x field.
	cityDescX := cityFields[0].Descriptor()
	// city.DefaultX holds the default value on creation for the x field.
	city.DefaultX = cityDescX.Default.(int)
	// cityDescY is the schema descriptor for y field.
	cityDescY := cityFields[1].Descriptor()
	// city.DefaultY holds the default value on creation for the y field.
	city.DefaultY = cityDescY.Default.(int)
	// cityDescName is the schema descriptor for name field.
	cityDescName := cityFields[2].Descriptor()
	// city.DefaultName holds the default value on creation for the name field.
	city.DefaultName = cityDescName.Default.(string)
	// city.NameValidator is a validator for the "name" field. It is called by the builders before save.
	city.NameValidator = cityDescName.Validators[0].(func(string) error)
	// cityDescPoints is the schema descriptor for points field.
	cityDescPoints := cityFields[3].Descriptor()
	// city.DefaultPoints holds the default value on creation for the points field.
	city.DefaultPoints = cityDescPoints.Default.(int)
	// cityDescWoodProduction is the schema descriptor for wood_production field.
	cityDescWoodProduction := cityFields[4].Descriptor()
	// city.DefaultWoodProduction holds the default value on creation for the wood_production field.
	city.DefaultWoodProduction = cityDescWoodProduction.Default.(int)
	// cityDescStoneProduction is the schema descriptor for stone_production field.
	cityDescStoneProduction := cityFields[5].Descriptor()
	// city.DefaultStoneProduction holds the default value on creation for the stone_production field.
	city.DefaultStoneProduction = cityDescStoneProduction.Default.(int)
	// cityDescIronProduction is the schema descriptor for iron_production field.
	cityDescIronProduction := cityFields[6].Descriptor()
	// city.DefaultIronProduction holds the default value on creation for the iron_production field.
	city.DefaultIronProduction = cityDescIronProduction.Default.(int)
	// cityDescFoodProduction is the schema descriptor for food_production field.
	cityDescFoodProduction := cityFields[7].Descriptor()
	// city.DefaultFoodProduction holds the default value on creation for the food_production field.
	city.DefaultFoodProduction = cityDescFoodProduction.Default.(int)
	// cityDescWoodStored is the schema descriptor for wood_stored field.
	cityDescWoodStored := cityFields[8].Descriptor()
	// city.DefaultWoodStored holds the default value on creation for the wood_stored field.
	city.DefaultWoodStored = cityDescWoodStored.Default.(int)
	// cityDescStoneStored is the schema descriptor for stone_stored field.
	cityDescStoneStored := cityFields[9].Descriptor()
	// city.DefaultStoneStored holds the default value on creation for the stone_stored field.
	city.DefaultStoneStored = cityDescStoneStored.Default.(int)
	// cityDescIronStored is the schema descriptor for iron_stored field.
	cityDescIronStored := cityFields[10].Descriptor()
	// city.DefaultIronStored holds the default value on creation for the iron_stored field.
	city.DefaultIronStored = cityDescIronStored.Default.(int)
	// cityDescFoodStored is the schema descriptor for food_stored field.
	cityDescFoodStored := cityFields[11].Descriptor()
	// city.DefaultFoodStored holds the default value on creation for the food_stored field.
	city.DefaultFoodStored = cityDescFoodStored.Default.(int)
	// cityDescWoodLimit is the schema descriptor for wood_limit field.
	cityDescWoodLimit := cityFields[12].Descriptor()
	// city.DefaultWoodLimit holds the default value on creation for the wood_limit field.
	city.DefaultWoodLimit = cityDescWoodLimit.Default.(int)
	// cityDescStoneLimit is the schema descriptor for stone_limit field.
	cityDescStoneLimit := cityFields[13].Descriptor()
	// city.DefaultStoneLimit holds the default value on creation for the stone_limit field.
	city.DefaultStoneLimit = cityDescStoneLimit.Default.(int)
	// cityDescIronLimit is the schema descriptor for iron_limit field.
	cityDescIronLimit := cityFields[14].Descriptor()
	// city.DefaultIronLimit holds the default value on creation for the iron_limit field.
	city.DefaultIronLimit = cityDescIronLimit.Default.(int)
	// cityDescFoodLimit is the schema descriptor for food_limit field.
	cityDescFoodLimit := cityFields[15].Descriptor()
	// city.DefaultFoodLimit holds the default value on creation for the food_limit field.
	city.DefaultFoodLimit = cityDescFoodLimit.Default.(int)
	// cityDescQueueTime is the schema descriptor for queue_time field.
	cityDescQueueTime := cityFields[16].Descriptor()
	// city.DefaultQueueTime holds the default value on creation for the queue_time field.
	city.DefaultQueueTime = cityDescQueueTime.Default.(func() time.Time)
	// cityDescConstructionSpeed is the schema descriptor for construction_speed field.
	cityDescConstructionSpeed := cityFields[17].Descriptor()
	// city.DefaultConstructionSpeed holds the default value on creation for the construction_speed field.
	city.DefaultConstructionSpeed = cityDescConstructionSpeed.Default.(int)
	constructionFields := schema.Construction{}.Fields()
	_ = constructionFields
	// constructionDescRawProduction is the schema descriptor for raw_production field.
	constructionDescRawProduction := constructionFields[2].Descriptor()
	// construction.DefaultRawProduction holds the default value on creation for the raw_production field.
	construction.DefaultRawProduction = constructionDescRawProduction.Default.(int)
	// constructionDescType is the schema descriptor for type field.
	constructionDescType := constructionFields[3].Descriptor()
	// construction.DefaultType holds the default value on creation for the type field.
	construction.DefaultType = constructionDescType.Default.(int)
	// constructionDescLevel is the schema descriptor for level field.
	constructionDescLevel := constructionFields[4].Descriptor()
	// construction.DefaultLevel holds the default value on creation for the level field.
	construction.DefaultLevel = constructionDescLevel.Default.(int)
	// constructionDescModifier is the schema descriptor for modifier field.
	constructionDescModifier := constructionFields[5].Descriptor()
	// construction.DefaultModifier holds the default value on creation for the modifier field.
	construction.DefaultModifier = constructionDescModifier.Default.(float64)
	// constructionDescNeedRefresh is the schema descriptor for need_refresh field.
	constructionDescNeedRefresh := constructionFields[6].Descriptor()
	// construction.DefaultNeedRefresh holds the default value on creation for the need_refresh field.
	construction.DefaultNeedRefresh = constructionDescNeedRefresh.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescGold is the schema descriptor for gold field.
	userDescGold := userFields[3].Descriptor()
	// user.DefaultGold holds the default value on creation for the gold field.
	user.DefaultGold = userDescGold.Default.(int)
	// userDescDiamonds is the schema descriptor for diamonds field.
	userDescDiamonds := userFields[4].Descriptor()
	// user.DefaultDiamonds holds the default value on creation for the diamonds field.
	user.DefaultDiamonds = userDescDiamonds.Default.(int)
	// userDescDarkwood is the schema descriptor for darkwood field.
	userDescDarkwood := userFields[5].Descriptor()
	// user.DefaultDarkwood holds the default value on creation for the darkwood field.
	user.DefaultDarkwood = userDescDarkwood.Default.(int)
	// userDescRunestone is the schema descriptor for runestone field.
	userDescRunestone := userFields[6].Descriptor()
	// user.DefaultRunestone holds the default value on creation for the runestone field.
	user.DefaultRunestone = userDescRunestone.Default.(int)
	// userDescVeritium is the schema descriptor for veritium field.
	userDescVeritium := userFields[7].Descriptor()
	// user.DefaultVeritium holds the default value on creation for the veritium field.
	user.DefaultVeritium = userDescVeritium.Default.(int)
	// userDescTrueseed is the schema descriptor for trueseed field.
	userDescTrueseed := userFields[8].Descriptor()
	// user.DefaultTrueseed holds the default value on creation for the trueseed field.
	user.DefaultTrueseed = userDescTrueseed.Default.(int)
	// userDescRank is the schema descriptor for rank field.
	userDescRank := userFields[9].Descriptor()
	// user.DefaultRank holds the default value on creation for the rank field.
	user.DefaultRank = userDescRank.Default.(int)
	// userDescAllianceRank is the schema descriptor for alliance_rank field.
	userDescAllianceRank := userFields[10].Descriptor()
	// user.DefaultAllianceRank holds the default value on creation for the alliance_rank field.
	user.DefaultAllianceRank = userDescAllianceRank.Default.(int)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"openlou/ent/user"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Gold holds the value of the "gold" field.
	Gold int `json:"gold,omitempty"`
	// Diamonds holds the value of the "diamonds" field.
	Diamonds int `json:"diamonds,omitempty"`
	// Darkwood holds the value of the "darkwood" field.
	Darkwood int `json:"darkwood,omitempty"`
	// Runestone holds the value of the "runestone" field.
	Runestone int `json:"runestone,omitempty"`
	// Veritium holds the value of the "veritium" field.
	Veritium int `json:"veritium,omitempty"`
	// Trueseed holds the value of the "trueseed" field.
	Trueseed int `json:"trueseed,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// AllianceRank holds the value of the "alliance_rank" field.
	AllianceRank int `json:"alliance_rank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[0] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldGold, user.FieldDiamonds, user.FieldDarkwood, user.FieldRunestone, user.FieldVeritium, user.FieldTrueseed, user.FieldRank, user.FieldAllianceRank:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldPasswordHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldGold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gold", values[i])
			} else if value.Valid {
				u.Gold = int(value.Int64)
			}
		case user.FieldDiamonds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diamonds", values[i])
			} else if value.Valid {
				u.Diamonds = int(value.Int64)
			}
		case user.FieldDarkwood:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field darkwood", values[i])
			} else if value.Valid {
				u.Darkwood = int(value.Int64)
			}
		case user.FieldRunestone:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field runestone", values[i])
			} else if value.Valid {
				u.Runestone = int(value.Int64)
			}
		case user.FieldVeritium:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field veritium", values[i])
			} else if value.Valid {
				u.Veritium = int(value.Int64)
			}
		case user.FieldTrueseed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trueseed", values[i])
			} else if value.Valid {
				u.Trueseed = int(value.Int64)
			}
		case user.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				u.Rank = int(value.Int64)
			}
		case user.FieldAllianceRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alliance_rank", values[i])
			} else if value.Valid {
				u.AllianceRank = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCities queries the "cities" edge of the User entity.
func (u *User) QueryCities() *CityQuery {
	return (&UserClient{config: u.config}).QueryCities(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(u.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("gold=")
	builder.WriteString(fmt.Sprintf("%v", u.Gold))
	builder.WriteString(", ")
	builder.WriteString("diamonds=")
	builder.WriteString(fmt.Sprintf("%v", u.Diamonds))
	builder.WriteString(", ")
	builder.WriteString("darkwood=")
	builder.WriteString(fmt.Sprintf("%v", u.Darkwood))
	builder.WriteString(", ")
	builder.WriteString("runestone=")
	builder.WriteString(fmt.Sprintf("%v", u.Runestone))
	builder.WriteString(", ")
	builder.WriteString("veritium=")
	builder.WriteString(fmt.Sprintf("%v", u.Veritium))
	builder.WriteString(", ")
	builder.WriteString("trueseed=")
	builder.WriteString(fmt.Sprintf("%v", u.Trueseed))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", u.Rank))
	builder.WriteString(", ")
	builder.WriteString("alliance_rank=")
	builder.WriteString(fmt.Sprintf("%v", u.AllianceRank))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package user

import (
	"openlou/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// Gold applies equality check predicate on the "gold" field. It's identical to GoldEQ.
func Gold(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGold, v))
}

// Diamonds applies equality check predicate on the "diamonds" field. It's identical to DiamondsEQ.
func Diamonds(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiamonds, v))
}

// Darkwood applies equality check predicate on the "darkwood" field. It's identical to DarkwoodEQ.
func Darkwood(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDarkwood, v))
}

// Runestone applies equality check predicate on the "runestone" field. It's identical to RunestoneEQ.
func Runestone(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRunestone, v))
}

// Veritium applies equality check predicate on the "veritium" field. It's identical to VeritiumEQ.
func Veritium(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVeritium, v))
}

// Trueseed applies equality check predicate on the "trueseed" field. It's identical to TrueseedEQ.
func Trueseed(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrueseed, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRank, v))
}

// AllianceRank applies equality check predicate on the "alliance_rank" field. It's identical to AllianceRankEQ.
func AllianceRank(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllianceRank, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// GoldEQ applies the EQ predicate on the "gold" field.
func GoldEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGold, v))
}

// GoldNEQ applies the NEQ predicate on the "gold" field.
func GoldNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGold, v))
}

// GoldIn applies the In predicate on the "gold" field.
func GoldIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldGold, vs...))
}

// GoldNotIn applies the NotIn predicate on the "gold" field.
func GoldNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGold, vs...))
}

// GoldGT applies the GT predicate on the "gold" field.
func GoldGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldGold, v))
}

// GoldGTE applies the GTE predicate on the "gold" field.
func GoldGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGold, v))
}

// GoldLT applies the LT predicate on the "gold" field.
func GoldLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldGold, v))
}

// GoldLTE applies the LTE predicate on the "gold" field.
func GoldLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGold, v))
}

// DiamondsEQ applies the EQ predicate on the "diamonds" field.
func DiamondsEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiamonds, v))
}

// DiamondsNEQ applies the NEQ predicate on the "diamonds" field.
func DiamondsNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDiamonds, v))
}

// DiamondsIn applies the In predicate on the "diamonds" field.
func DiamondsIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldDiamonds, vs...))
}

// DiamondsNotIn applies the NotIn predicate on the "diamonds" field.
func DiamondsNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDiamonds, vs...))
}

// DiamondsGT applies the GT predicate on the "diamonds" field.
func DiamondsGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldDiamonds, v))
}

// DiamondsGTE applies the GTE predicate on the "diamonds" field.
func DiamondsGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDiamonds, v))
}

// DiamondsLT applies the LT predicate on the "diamonds" field.
func DiamondsLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldDiamonds, v))
}

// DiamondsLTE applies the LTE predicate on the "diamonds" field.
func DiamondsLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDiamonds, v))
}

// DarkwoodEQ applies the EQ predicate on the "darkwood" field.
func DarkwoodEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDarkwood, v))
}

// DarkwoodNEQ applies the NEQ predicate on the "darkwood" field.
func DarkwoodNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDarkwood, v))
}

// DarkwoodIn applies the In predicate on the "darkwood" field.
func DarkwoodIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldDarkwood, vs...))
}

// DarkwoodNotIn applies the NotIn predicate on the "darkwood" field.
func DarkwoodNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDarkwood, vs...))
}

// DarkwoodGT applies the GT predicate on the "darkwood" field.
func DarkwoodGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldDarkwood, v))
}

// DarkwoodGTE applies the GTE predicate on the "darkwood" field.
func DarkwoodGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDarkwood, v))
}

// DarkwoodLT applies the LT predicate on the "darkwood" field.
func DarkwoodLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldDarkwood, v))
}

// DarkwoodLTE applies the LTE predicate on the "darkwood" field.
func DarkwoodLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDarkwood, v))
}

// RunestoneEQ applies the EQ predicate on the "runestone" field.
func RunestoneEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRunestone, v))
}

// RunestoneNEQ applies the NEQ predicate on the "runestone" field.
func RunestoneNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRunestone, v))
}

// RunestoneIn applies the In predicate on the "runestone" field.
func RunestoneIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRunestone, vs...))
}

// RunestoneNotIn applies the NotIn predicate on the "runestone" field.
func RunestoneNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRunestone, vs...))
}

// RunestoneGT applies the GT predicate on the "runestone" field.
func RunestoneGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRunestone, v))
}

// RunestoneGTE applies the GTE predicate on the "runestone" field.
func RunestoneGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRunestone, v))
}

// RunestoneLT applies the LT predicate on the "runestone" field.
func RunestoneLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRunestone, v))
}

// RunestoneLTE applies the LTE predicate on the "runestone" field.
func RunestoneLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRunestone, v))
}

// VeritiumEQ applies the EQ predicate on the "veritium" field.
func VeritiumEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVeritium, v))
}

// VeritiumNEQ applies the NEQ predicate on the "veritium" field.
func VeritiumNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVeritium, v))
}

// VeritiumIn applies the In predicate on the "veritium" field.
func VeritiumIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldVeritium, vs...))
}

// VeritiumNotIn applies the NotIn predicate on the "veritium" field.
func VeritiumNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldVeritium, vs...))
}

// VeritiumGT applies the GT predicate on the "veritium" field.
func VeritiumGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldVeritium, v))
}

// VeritiumGTE applies the GTE predicate on the "veritium" field.
func VeritiumGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldVeritium, v))
}

// VeritiumLT applies the LT predicate on the "veritium" field.
func VeritiumLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldVeritium, v))
}

// VeritiumLTE applies the LTE predicate on the "veritium" field.
func VeritiumLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldVeritium, v))
}

// TrueseedEQ applies the EQ predicate on the "trueseed" field.
func TrueseedEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrueseed, v))
}

// TrueseedNEQ applies the NEQ predicate on the "trueseed" field.
func TrueseedNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTrueseed, v))
}

// TrueseedIn applies the In predicate on the "trueseed" field.
func TrueseedIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldTrueseed, vs...))
}

// TrueseedNotIn applies the NotIn predicate on the "trueseed" field.
func TrueseedNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTrueseed, vs...))
}

// TrueseedGT applies the GT predicate on the "trueseed" field.
func TrueseedGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldTrueseed, v))
}

// TrueseedGTE applies the GTE predicate on the "trueseed" field.
func TrueseedGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTrueseed, v))
}

// TrueseedLT applies the LT predicate on the "trueseed" field.
func TrueseedLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldTrueseed, v))
}

// TrueseedLTE applies the LTE predicate on the "trueseed" field.
func TrueseedLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTrueseed, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRank, v))
}

// AllianceRankEQ applies the EQ predicate on the "alliance_rank" field.
func AllianceRankEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllianceRank, v))
}

// AllianceRankNEQ applies the NEQ predicate on the "alliance_rank" field.
func AllianceRankNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAllianceRank, v))
}

// AllianceRankIn applies the In predicate on the "alliance_rank" field.
func AllianceRankIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAllianceRank, vs...))
}

// AllianceRankNotIn applies the NotIn predicate on the "alliance_rank" field.
func AllianceRankNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAllianceRank, vs...))
}

// AllianceRankGT applies the GT predicate on the "alliance_rank" field.
func AllianceRankGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAllianceRank, v))
}

// AllianceRankGTE applies the GTE predicate on the "alliance_rank" field.
func AllianceRankGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAllianceRank, v))
}

// AllianceRankLT applies the LT predicate on the "alliance_rank" field.
func AllianceRankLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAllianceRank, v))
}

// AllianceRankLTE applies the LTE predicate on the "alliance_rank" field.
func AllianceRankLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAllianceRank, v))
}

// HasCities applies the HasEdge predicate on the "cities" edge.
func HasCities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CitiesTable, CitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCitiesWith applies the HasEdge predicate on the "cities" edge with a given conditions (other predicates).
func HasCitiesWith(preds ...predicate.City) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CitiesTable, CitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}

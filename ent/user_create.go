// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openlou/ent/city"
	"openlou/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPasswordHash sets the "password_hash" field.
func (uc *UserCreate) SetPasswordHash(s string) *UserCreate {
	uc.mutation.SetPasswordHash(s)
	return uc
}

// SetGold sets the "gold" field.
func (uc *UserCreate) SetGold(i int) *UserCreate {
	uc.mutation.SetGold(i)
	return uc
}

// SetNillableGold sets the "gold" field if the given value is not nil.
func (uc *UserCreate) SetNillableGold(i *int) *UserCreate {
	if i != nil {
		uc.SetGold(*i)
	}
	return uc
}

// SetDiamonds sets the "diamonds" field.
func (uc *UserCreate) SetDiamonds(i int) *UserCreate {
	uc.mutation.SetDiamonds(i)
	return uc
}

// SetNillableDiamonds sets the "diamonds" field if the given value is not nil.
func (uc *UserCreate) SetNillableDiamonds(i *int) *UserCreate {
	if i != nil {
		uc.SetDiamonds(*i)
	}
	return uc
}

// SetDarkwood sets the "darkwood" field.
func (uc *UserCreate) SetDarkwood(i int) *UserCreate {
	uc.mutation.SetDarkwood(i)
	return uc
}

// SetNillableDarkwood sets the "darkwood" field if the given value is not nil.
func (uc *UserCreate) SetNillableDarkwood(i *int) *UserCreate {
	if i != nil {
		uc.SetDarkwood(*i)
	}
	return uc
}

// SetRunestone sets the "runestone" field.
func (uc *UserCreate) SetRunestone(i int) *UserCreate {
	uc.mutation.SetRunestone(i)
	return uc
}

// SetNillableRunestone sets the "runestone" field if the given value is not nil.
func (uc *UserCreate) SetNillableRunestone(i *int) *UserCreate {
	if i != nil {
		uc.SetRunestone(*i)
	}
	return uc
}

// SetVeritium sets the "veritium" field.
func (uc *UserCreate) SetVeritium(i int) *UserCreate {
	uc.mutation.SetVeritium(i)
	return uc
}

// SetNillableVeritium sets the "veritium" field if the given value is not nil.
func (uc *UserCreate) SetNillableVeritium(i *int) *UserCreate {
	if i != nil {
		uc.SetVeritium(*i)
	}
	return uc
}

// SetTrueseed sets the "trueseed" field.
func (uc *UserCreate) SetTrueseed(i int) *UserCreate {
	uc.mutation.SetTrueseed(i)
	return uc
}

// SetNillableTrueseed sets the "trueseed" field if the given value is not nil.
func (uc *UserCreate) SetNillableTrueseed(i *int) *UserCreate {
	if i != nil {
		uc.SetTrueseed(*i)
	}
	return uc
}

// SetRank sets the "rank" field.
func (uc *UserCreate) SetRank(i int) *UserCreate {
	uc.mutation.SetRank(i)
	return uc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (uc *UserCreate) SetNillableRank(i *int) *UserCreate {
	if i != nil {
		uc.SetRank(*i)
	}
	return uc
}

// SetAllianceRank sets the "alliance_rank" field.
func (uc *UserCreate) SetAllianceRank(i int) *UserCreate {
	uc.mutation.SetAllianceRank(i)
	return uc
}

// SetNillableAllianceRank sets the "alliance_rank" field if the given value is not nil.
func (uc *UserCreate) SetNillableAllianceRank(i *int) *UserCreate {
	if i != nil {
		uc.SetAllianceRank(*i)
	}
	return uc
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (uc *UserCreate) AddCityIDs(ids ...int) *UserCreate {
	uc.mutation.AddCityIDs(ids...)
	return uc
}

// AddCities adds the "cities" edges to the City entity.
func (uc *UserCreate) AddCities(c ...*City) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCityIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Gold(); !ok {
		v := user.DefaultGold
		uc.mutation.SetGold(v)
	}
	if _, ok := uc.mutation.Diamonds(); !ok {
		v := user.DefaultDiamonds
		uc.mutation.SetDiamonds(v)
	}
	if _, ok := uc.mutation.Darkwood(); !ok {
		v := user.DefaultDarkwood
		uc.mutation.SetDarkwood(v)
	}
	if _, ok := uc.mutation.Runestone(); !ok {
		v := user.DefaultRunestone
		uc.mutation.SetRunestone(v)
	}
	if _, ok := uc.mutation.Veritium(); !ok {
		v := user.DefaultVeritium
		uc.mutation.SetVeritium(v)
	}
	if _, ok := uc.mutation.Trueseed(); !ok {
		v := user.DefaultTrueseed
		uc.mutation.SetTrueseed(v)
	}
	if _, ok := uc.mutation.Rank(); !ok {
		v := user.DefaultRank
		uc.mutation.SetRank(v)
	}
	if _, ok := uc.mutation.AllianceRank(); !ok {
		v := user.DefaultAllianceRank
		uc.mutation.SetAllianceRank(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if v, ok := uc.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Gold(); !ok {
		return &ValidationError{Name: "gold", err: errors.New(`ent: missing required field "User.gold"`)}
	}
	if _, ok := uc.mutation.Diamonds(); !ok {
		return &ValidationError{Name: "diamonds", err: errors.New(`ent: missing required field "User.diamonds"`)}
	}
	if _, ok := uc.mutation.Darkwood(); !ok {
		return &ValidationError{Name: "darkwood", err: errors.New(`ent: missing required field "User.darkwood"`)}
	}
	if _, ok := uc.mutation.Runestone(); !ok {
		return &ValidationError{Name: "runestone", err: errors.New(`ent: missing required field "User.runestone"`)}
	}
	if _, ok := uc.mutation.Veritium(); !ok {
		return &ValidationError{Name: "veritium", err: errors.New(`ent: missing required field "User.veritium"`)}
	}
	if _, ok := uc.mutation.Trueseed(); !ok {
		return &ValidationError{Name: "trueseed", err: errors.New(`ent: missing required field "User.trueseed"`)}
	}
	if _, ok := uc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "User.rank"`)}
	}
	if _, ok := uc.mutation.AllianceRank(); !ok {
		return &ValidationError{Name: "alliance_rank", err: errors.New(`ent: missing required field "User.alliance_rank"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := uc.mutation.Gold(); ok {
		_spec.SetField(user.FieldGold, field.TypeInt, value)
		_node.Gold = value
	}
	if value, ok := uc.mutation.Diamonds(); ok {
		_spec.SetField(user.FieldDiamonds, field.TypeInt, value)
		_node.Diamonds = value
	}
	if value, ok := uc.mutation.Darkwood(); ok {
		_spec.SetField(user.FieldDarkwood, field.TypeInt, value)
		_node.Darkwood = value
	}
	if value, ok := uc.mutation.Runestone(); ok {
		_spec.SetField(user.FieldRunestone, field.TypeInt, value)
		_node.Runestone = value
	}
	if value, ok := uc.mutation.Veritium(); ok {
		_spec.SetField(user.FieldVeritium, field.TypeInt, value)
		_node.Veritium = value
	}
	if value, ok := uc.mutation.Trueseed(); ok {
		_spec.SetField(user.FieldTrueseed, field.TypeInt, value)
		_node.Trueseed = value
	}
	if value, ok := uc.mutation.Rank(); ok {
		_spec.SetField(user.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if value, ok := uc.mutation.AllianceRank(); ok {
		_spec.SetField(user.FieldAllianceRank, field.TypeInt, value)
		_node.AllianceRank = value
	}
	if nodes := uc.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CitiesTable,
			Columns: []string{user.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
